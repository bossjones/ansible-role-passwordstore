---
# ansible-playbook -i "localhost," -c local playbook.yml
# ansible-playbook -i "localhost," -c local playbook.yml --extra-vars="bossjones__passwordstore__user=$(whoami)"
# ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook.yml --extra-vars="bossjones__passwordstore__user=$(whoami)"
# - hosts: localhost
#   connection: local
#   become: true
#   roles:
#     - ../ansible-role-passwordstore

# SOURCE: Inspiration - https://github.com/jan-warchol/ansible-workstation-setup/blob/a7bc1045882a4ab1cc35530083cd10db74c901dd/cli-setup-secrets.yml
# SOURCE: https://www.bootc.net/archives/2013/06/09/my-perfect-gnupg-ssh-agent-setup/

- name: get information about ansible control machine
  hosts: localhost
  connection: local
  become: true
  gather_facts: yes

- name: Setup | gpg key generate and configure
  become: true
  hosts: localhost
  connection: local

  vars:
    pass_gpg_key_fingerprint: "EC5E 11DD EF42 BF79 FBFA 4F4E FF6A DDEB B33A 5D2F"
    key_filename: "GPG_key_{{ pass_gpg_key_fingerprint | replace(' ', '') }}.asc"
    control_machine_ip: "{{ hostvars['localhost'].ansible_default_ipv4.address }}"
    hide_sensitive_logs: false

  # pre_tasks:
  #   # SOURCE: https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session
  #   # SOURCE: https://superuser.com/questions/1172804/how-to-prevent-gpg-agent-from-timing-out-during-passphrase-collection?rq=1
  #   - name: 'gpg-agent.conf'
  #     copy:
  #       dest: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
  #       content: |
  #############################################################
  # SOURCE: https://benincosa.com/?p=3235
  #############################################################
  #         default-cache-ttl 600
  #         pinentry-program /usr/local/bin/pinentry
  #         no-grab
  #         max-cache-ttl 172800
  ##############################################################
  #         default-cache-ttl 34560000
  #         max-cache-ttl 34560000
  #         pinentry-timeout 0
  #         pinentry-program /usr/bin/pinentry-curses --timeout 0
  #       mode: 0600
  #     no_log: "{{ hide_sensitive_logs }}"
  # SOURCE: https://benincosa.com/?p=3235
  # SOURCE: https://jimsaunders.net/2017/02/18/setting-up-the-pass-password-manager.html
  roles:
    - role: ../ansible-gpgkey_generate
      gpg_generator_user: "{{ bossjones__passwordstore__user }}"
      gpg_user: "{{ bossjones__passwordstore__user }}"
      gpg_realname: "GPG {{ bossjones__passwordstore__user }} user"
      gpg_useremail: "{{ bossjones__passwordstore__user }}@localhost"
      gpg_pubkeyfile: "{{ bossjones__passwordstore__user }}.pub"
      gpg_privkeyfile: "{{ bossjones__passwordstore__user }}.priv"
      gpg_pubkeyfileexport: "{{ bossjones__passwordstore__user }}.asc"
      gpg_fingerprint: "{{ bossjones__passwordstore__user }}-fingerprint"
      gpg_keylength: 4096
      gpg_subkeylength: 4096
      gpg_expire: 0
      gpg_passphrase: "{{ lookup('env','MY_GPG_PASSPHRASE') }}"
      ## recover files on orchestrator?
      gpg_pull: false

  post_tasks:

    - name: Generate secret key fingerprint file
      shell: "gpg2 --fingerprint {{ bossjones__passwordstore__user }}@localhost | grep -v SCEA | head -1 | awk '{print $9$10}' | tee /home/{{ bossjones__passwordstore__user }}/{{ bossjones__passwordstore__user }}-fingerprint"
      args:
        chdir: "~{{bossjones__passwordstore__user}}"
        executable: /bin/bash
      changed_when: false
      register: gpg_user_fingerprint
      become: yes
      become_user: "{{ bossjones__passwordstore__user }}"


- name: setup password store
  # hosts: all
  hosts: localhost
  connection: local

  vars:
    pass_gpg_key_fingerprint: "EC5E 11DD EF42 BF79 FBFA 4F4E FF6A DDEB B33A 5D2F"
    key_filename: "GPG_key_{{ pass_gpg_key_fingerprint | replace(' ', '') }}.asc"
    control_machine_ip: "{{ hostvars['localhost'].ansible_default_ipv4.address }}"
    hide_sensitive_logs: false

  # pre_tasks:
  #   # SOURCE: https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session
  #   # SOURCE: https://superuser.com/questions/1172804/how-to-prevent-gpg-agent-from-timing-out-during-passphrase-collection?rq=1
  #   - name: 'gpg-agent.conf'
  #     copy:
  #       dest: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
  #       content: |
  #############################################################
  # SOURCE: https://benincosa.com/?p=3235
  #############################################################
  #         default-cache-ttl 600
  #         pinentry-program /usr/local/bin/pinentry
  #         no-grab
  #         max-cache-ttl 172800
  ##############################################################
  #         default-cache-ttl 34560000
  #         max-cache-ttl 34560000
  #         pinentry-timeout 0
  #         pinentry-program /usr/bin/pinentry-curses --timeout 0
  #       mode: 0600
  #     no_log: "{{ hide_sensitive_logs }}"
  # SOURCE: https://benincosa.com/?p=3235
  # SOURCE: https://jimsaunders.net/2017/02/18/setting-up-the-pass-password-manager.html
  roles:
    - ../ansible-role-knownhosts
    - role: ../ansible-role-passwordstore
      bossjones__passwordstore__configure_password_store_docker: True

  post_tasks:

    - name: ensure directories exist
      file:
        dest: "~{{ bossjones__passwordstore__user }}/{{ item }}"
        state: directory
        mode: 0700
      loop:
        - .docker
      become: yes
      become_user: "{{ bossjones__passwordstore__user }}"

    # SOURCE: https://docs.docker.com/engine/reference/commandline/login/
    - name: "~{{ bossjones__passwordstore__user }}/.docker/config.json"
      copy:
        dest: "~{{ bossjones__passwordstore__user }}/.docker/config.json"
        content: |
          {
            "credsStore": "pass"
          }
        mode: 0600
      become: yes
      become_user: "{{ bossjones__passwordstore__user }}"

    # SOURCE: https://docs.docker.com/engine/reference/commandline/login/
    - name: "~{{ bossjones__passwordstore__user }}/bin/fzf-drafts"
      copy:
        dest: "~{{ bossjones__passwordstore__user }}/bin/fzf-drafts"
        content: |
          #!/bin/bash

          # SOURCE: https://github.com/jan-warchol/dotfiles/tree/master/bin

          fzf_find_all() {
              # exclude some useless hidden directories, but not all.
              # in particular, include *files* directly inside .git, .git/hooks and .git/info
              command find -L $@ \
                  \( -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \
                     -o -path '*.git/*' ! -path '*/.git/info' ! -path '*/.git/hooks' -a -type d \
                     -o -name 'node_modules' \
                     -o -path '*/.local/share/Trash' \
                     -o -path '*/.vim/plugged' \
                     -o -name '.npm' \
                     -o -name '.cache' \
                  \) -prune \
                  -o -print \
                  -mindepth 1 \
                  2> /dev/null
          }

          # this is a separate function for performance reasons (more conditions result
          # in longer execution).
          fzf_find() {
              # exclude hidden files and node_modules
              command find -L $@ \
                  \( -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \
                     -o -name 'node_modules' \
                     -o -name 'host-venv' \
                     -o -path '*/organizator/lib' \
                     -o -path '*/esi-release/*/*/*' \
                     -o -path '*/.*' \
                  \) -prune \
                  -o -print \
                  -mindepth 1 \
                  2> /dev/null
          }

          if [ "$1" == "--files" ]; then typesel="-type f"; shift; else typesel=""; fi
          # exclude hidden files and node_modules
          command find -L $@ \
              \( -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \
                 -o -name 'node_modules' \
                 -o -name 'host-venv' \
                 -o -path '*/organizator/lib' \
                 -o -path '*/esi-release/*/*/*' \
                 -o -path '*/.*' \
              \) -prune \
              -o $typesel -print \
              -mindepth 1 \
              2> /dev/null

          # Key bindings
          # ------------
          source "$FZF_HOME/shell/key-bindings.bash"

          # export FZF_ALT_C_OPTS="--preview 'tree -C -L 2 --dirsfirst {} | head -200'"

          ls_dotfiles() {
              # list all dotfiles tracked in my dotfiles git repo
              GIT_DIR=~/.dotfiles.git git ls-files
              fzf_find_all ~/.fzf
          }

          # fuzzy-search starting in various directories
          bind -x '"\C-u\C-t": FZF_CTRL_T_COMMAND="fzf_find | cut -c3-"      fzf-file-widget'
          bind -x '"\C-u\C-a": FZF_CTRL_T_COMMAND="fzf_find_all | cut -c3-"  fzf-file-widget'
          bind -x '"\C-u\C-g": FZF_CTRL_T_COMMAND="git ls-files"             fzf-file-widget'
          bind -x '"\C-u\C-h": FZF_CTRL_T_COMMAND="fzf_find ~"               fzf-file-widget'
          bind -x '"\C-u\C-e": FZF_CTRL_T_COMMAND="fzf_find /etc"            fzf-file-widget'
          bind -x '"\C-u\C-r": FZF_CTRL_T_COMMAND="fzf_find /"               fzf-file-widget'
          bind -x '"\C-u\C-j": FZF_CTRL_T_COMMAND="fzf_find ~/data ~/zasoby" fzf-file-widget'
          bind -x '"\C-u\C-d": FZF_CTRL_T_COMMAND="ls_dotfiles"              fzf-file-widget'




          # opening files
          #   - CTRL-O to use xdg-open command,
          #   - CTRL-E or Enter key to open with the $EDITOR
          fzf-open() {
            local out file key
            out=$(find $1 | fzf --expect=ctrl-o,ctrl-e)
            key=$(head -1 <<< "$out")
            file=$(head -2 <<< "$out" | tail -1)
            if [ -n "$file" ]; then
              [ "$key" = ctrl-o ] && cd "$file" || ${EDITOR:-vim} "$file"
            fi
          }

          # opening files
          #   - CTRL-O to use xdg-open command,
          #   - CTRL-E or Enter key to open with the $EDITOR
          fzf-open() {
            local out file key
            out=$(find $1 | fzf --expect=ctrl-o,ctrl-e)
            echo $out
            key=$(head -1 <<< "$out")
            file=$(head -2 <<< "$out" | tail -1)
            if [ -n "$file" ]; then
              echo "$key"
              case "$key" in
                ctrl-o)
                  cd "$file"
                  pwd
                  ;;
                ctrl-e)
                  ${EDITOR:-vim} "$file"
                  ;;
                *)
                  echo lol
                  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$file${READLINE_LINE:$READLINE_POINT}"
                  READLINE_POINT=$(( READLINE_POINT + ${#file} ))
                  ;;
              esac
            fi
            # cd ~/tmp
          }

          bind -x '"\C-o\C-o": fzf-open'
        mode: 0755
      become: yes
      become_user: "{{ bossjones__passwordstore__user }}"

    - name: gpg-agent | remember password longer
      blockinfile:
        path: "~{{ bossjones__passwordstore__user }}/.gnupg/gpg-agent.conf"
        backup: yes
        block: |
          # remember the password longer (3 hours since last usage, 10 hours max)
          default-cache-ttl 10800
          max-cache-ttl 36000

  # NOTE: don't forget to cat /etc/X11/Xsession.d/90gpg-agent

# SOURCE: https://github.com/jan-warchol/smart-bash-history/blob/master/fuzzy-search.sh
# SOURCE: https://www.geeksforgeeks.org/bind-command-in-linux-with-examples/
# if which fzf >/dev/null; then
#   __history_fzf_search() (
#     __reload_history
#     # remove entry numbers and timestamps (if any)
#     HISTTIMEFORMAT= history | sed 's/^ *\([0-9]*\)\** *//' |
#       fzf --height 50% --tiebreak=index --bind=ctrl-r:toggle-sort \
#       --tac --sync --no-multi "--query=$*" ||
#       # restore typed input if fzf aborted
#       echo $*
#   )
#   # replace default Ctrl-R mapping
#   bind '"\er": redraw-current-line'  # helper
#   bind '"\C-r": " \C-e\C-u`__history_fzf_search \C-y`\e\C-e\er"'
# fi
